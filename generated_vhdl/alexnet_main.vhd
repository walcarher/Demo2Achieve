--------------------------------------------------------
-- This file is generated by Delirium - Sma-RTY SAS 
-- Tue Sep 24 16:30:24 2019
--------------------------------------------------------

library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
library work;
  use work.bitwidths.all;
  use work.Delirium.all;
  use work.params.all;
entity alexnet_main is
generic(
  BITWIDTH  : integer := DATA_BITWIDTH;
  IMAGE_WIDTH : integer := INPUT_IMAGE_WIDTH
);
port(
  clk      : in std_logic;
  reset_n  : in std_logic;
  enable   : in std_logic;
  select_i : in std_logic_vector(31 downto 0);
  in_data  : in std_logic_vector(PIXEL_BITWIDTH -1 downto 0);
  in_dv    : in std_logic;
  in_fv    : in std_logic;
  out_data : out std_logic_vector(BITWIDTH-1 downto 0);
  out_dv   : out std_logic;
  out_fv   : out std_logic
  );
end entity;

architecture STRUCTURAL of alexnet_main is
 -- Signals
signal actual_input_1_data: data_array  (0 to INPUT_CHANNELS - 1);
signal actual_input_1_dv	: std_logic;
signal actual_input_1_fv	: std_logic;
signal s_17_data: accu_array (0 to CONV1_OUT_SIZE - 1);
signal s_17_dv	: std_logic;
signal s_17_fv	: std_logic;
signal s_18_data: data_array  (0 to RELU1_OUT_SIZE - 1);
signal s_18_dv	: std_logic;
signal s_18_fv	: std_logic;
signal s_19_data: data_array  (0 to MAXPOOL1_OUT_SIZE - 1);
signal s_19_dv	: std_logic;
signal s_19_fv	: std_logic;

 -- Instances
begin
InputLayer_i : InputLayer
generic map (
  BITWIDTH        => BITWIDTH,
  PIXEL_BITWIDTH  => PIXEL_BITWIDTH,
  NB_OUT_FLOWS    => INPUT_CHANNELS
)
port map (
  clk             => clk,
  reset_n         => reset_n,
  enable          => enable,
  in_data         => in_data,
  in_dv           => in_dv,
  in_fv           => in_fv,
  out_data        => actual_input_1_data,
  out_dv          => actual_input_1_dv,
  out_fv          => actual_input_1_fv
  );

CONV1 : ConvLayer
generic map (
  BITWIDTH     => BITWIDTH,
  ACCU_BITWIDTH=> ACCU_BITWIDTH,
  MULT_STYLE   => CONV1_MULT_STYLE,
  PIPELINE     => CONV1_PIPELINE,
  IMAGE_WIDTH  => CONV1_IMAGE_WIDTH,
  NB_OUT_FLOWS => CONV1_OUT_SIZE,
  NB_IN_FLOWS  => CONV1_IN_SIZE,
  KERNEL_SIZE  => CONV1_KERNEL_SIZE,
  PADDING      => CONV1_PADDING,
  STRIDE       => CONV1_STRIDE,
  KERNEL_VALUE => CONV1_KERNEL_VALUE,
  BIAS_VALUE   => CONV1_BIAS_VALUE
)
port map (
  clk      => clk,
  reset_n  => reset_n,
  enable   => enable,
  in_data  => actual_input_1_data,
  in_dv    => actual_input_1_dv,
  in_fv    => actual_input_1_fv,
  out_data => s_17_data,
  out_dv   => s_17_dv,
  out_fv   => s_17_fv
);

RELU1 : TanhLayer
generic map (
  BITWIDTH     => BITWIDTH,
  NB_OUT_FLOWS => RELU1_OUT_SIZE
)
port map (
  clk          => clk,
  reset_n      => reset_n,
  enable       => enable,
  in_data      => s_17_data,
  in_dv        => s_17_dv,
  in_fv        => s_17_fv,
  out_data     => s_18_data,
  out_dv       => s_18_dv,
  out_fv       => s_18_fv
);

MAXPOOL1 : PoolLayer
generic map (
  BITWIDTH     => BITWIDTH,
  IMAGE_WIDTH  => MAXPOOL1_IMAGE_WIDTH,
  KERNEL_SIZE  => MAXPOOL1_KERNEL_SIZE,
  NB_OUT_FLOWS => MAXPOOL1_OUT_SIZE
)
port map (
  clk          => clk,
  reset_n      => reset_n,
  enable       => enable,
  in_data      => s_18_data,
  in_dv        => s_18_dv,
  in_fv        => s_18_fv,
  out_data     => s_19_data,
  out_dv       => s_19_dv,
  out_fv       => s_19_fv
);

DisplayLayer_i: DisplayLayer
  generic map(
  BITWIDTH    => BITWIDTH,
  NB_IN_FLOWS => MAXPOOL1_OUT_SIZE
  )
  port map(
  in_data     => s_19_data,
  in_dv       => s_19_dv,
  in_fv       => s_19_fv,
  sel         => select_i,
  out_data    => out_data,
  out_dv      => out_dv,
  out_fv      => out_fv
);
end architecture;
